#!/usr/bin/env bash
# We should sign and use our new EFI file before we require signatures. Better to be safe right?
source /etc/mortar/mortar.env

if [ "$1" == "--interactive" ]; then
	read -p "Enter full path to the kernel file (likely in /boot): " KERNELFILE
	read -p "Enter full path to the initramfs/initrd img file (likely in /boot): " INITRAMFSFILE
	read -p "Do you want to attempt automatic addition of the new efi file to the UEFI boot menu? (y/N): " installprompt
	case "$installprompt" in
	    [yY]*) INSTALLENTRY=true ;;
	    *) INSTALLENTRY=false ;;
	esac
else
	KERNELFILE="$1"
	INITRAMFSFILE="$2"
	if [ "$3" == "--install-entry" ]; then INSTALLENTRY=true; fi
fi

# Source /etc/mortar/kernel.env if we don't have any args.
if [ -z $KERNELFILE ] && [ -z $INITRAMFSFILE ] && [ -f /etc/mortar/kernel.env ]; then source /etc/mortar/kernel.env; fi
if [ -z $KERNELFILE ]; then KERNELFILE='/boot/vmlinuz-linux'; fi
if [ -z $INITRAMFSFILE ]; then INITRAMFSFILE='/boot/initramfs-linux.img'; fi

testexist() {
	if ! [ -f "$2" ]; then echo "Usage: $0 kernelpath initramfspath"; echo "Could not locate $1 at $2"; exit 1; fi
}

testexist CMDLINEFILE "$CMDLINEFILE"
testexist KERNELFILE "$KERNELFILE"
testexist INITRAMFSFILE "$INITRAMFSFILE"
testexist EFISTUBFILE "$EFISTUBFILE"
testexist os-release /etc/os-release
UNSIGNEDEFIPATH="$TARGET_EFI.unsigned"
SIGNEDEFIPATH="$TARGET_EFI"

# Update or create kernel.env
cat << EOF > /etc/mortar/kernel.env
KERNELFILE="$KERNELFILE"
INITRAMFSFILE="$INITRAMFSFILE"
EOF

# Update cmdline.conf if it contains the running kernel version and the new kernel specified is different from last time we ran this. 
currentversion="$(uname -r)"
if grep -q "$currentversion" "$CMDLINEFILE" && grep -q "$currentversion" /etc/mortar/kernel.env && ! echo "$KERNELFILE" | grep -q "$currentversion"
then
	filename=$(sed -nE "s#.*/([A-Za-z0-9-]*$currentversion).*#\1#p" "$CMDLINEFILE")
	sed -i "s:$filename:${KERNELFILE##*/}:g" "$CMDLINEFILE"
fi	

# This section was based on the commands in the Arch wiki. wiki.archlinux.org/title/Unified_kernel_image#Manually
align="$(objdump -p $EFISTUBFILE | gawk '{ if ($1 == "SectionAlignment"){print $2} }')" #Get the alignment value from the stub file.
align=$((16#$align)) #convert to hex (base16)
# This long command dumps the stub headers and parses the size and offset values. 
osrel_offs="$(objdump -h "$EFISTUBFILE" | gawk 'NF==7 {size=strtonum("0x"$3); offset=strtonum("0x"$4)} END {print size + offset}')"
osrel_offs=$((osrel_offs + "$align" - osrel_offs % "$align")) #Math. This is where we start adding file data.
cmdline_offs=$((osrel_offs + $(stat -Lc%s "/etc/os-release"))) #Find the end of the os-release file.
cmdline_offs=$((cmdline_offs + "$align" - cmdline_offs % "$align")) #Where to start adding cmdline data.
splash_offs=$((cmdline_offs + $(stat -Lc%s "$CMDLINEFILE"))) #Find the end of the cmdlinefile.
splash_offs=$((splash_offs + "$align" - splash_offs % "$align")) #Where to add data for the splash. (We don't have one).
initrd_offs=$((splash_offs + 0)) #Since we don't have a splash file, this is zero. If you have one, replace 0 with: $(stat -Lc%s "/usr/share/systemd/bootctl/splash-arch.bmp")
initrd_offs=$((initrd_offs + "$align" - initrd_offs % "$align")) #Where to add data for initrd/initramfs file.
linux_offs=$((initrd_offs + $(stat -Lc%s "$INITRAMFSFILE"))) #Find the end of the initrd/initramfs.
linux_offs=$((linux_offs + "$align" - linux_offs % "$align")) #Where to add the kernel.

objcopy \
    --add-section .osrel="/etc/os-release" --change-section-vma .osrel=$(printf 0x%x $osrel_offs) \
    --add-section .cmdline="$CMDLINEFILE" \
    --change-section-vma .cmdline=$(printf 0x%x $cmdline_offs) \
    --add-section .splash="/dev/null" \
    --change-section-vma .splash=$(printf 0x%x $splash_offs) \
    --add-section .initrd="$INITRAMFSFILE" \
    --change-section-vma .initrd=$(printf 0x%x $initrd_offs) \
    --add-section .linux="$KERNELFILE" \
    --change-section-vma .linux=$(printf 0x%x $linux_offs) \
    "$EFISTUBFILE" "$UNSIGNEDEFIPATH"

if [ -f "$UNSIGNEDEFIPATH" ]; then echo "Created $UNSIGNEDEFIPATH"; else echo "Failed to create joined efi file at $UNSIGNEDEFIPATH"; exit 1; fi
if [ -f "$SIGNEDEFIPATH" ]; then echo "Found old signed file. Backing up to $SIGNEDEFIPATH.old.efi"; cp "$SIGNEDEFIPATH" "$SIGNEDEFIPATH.old.efi"; fi
echo "Signing..."

# Sign the new file. 
sbsign --key "$SECUREBOOT_DB_KEY" --cert "$SECUREBOOT_DB_CRT" --output "$SIGNEDEFIPATH" "$UNSIGNEDEFIPATH"

if [ -f "$SIGNEDEFIPATH" ]; then echo "Created signed $SIGNEDEFIPATH"; else echo "Failed to create signed efi file at $SIGNEDEFIPATH"; exit 1; fi
#echo "Removing unsigned efi file..."
#if (rm "$UNSIGNEDEFIPATH"); then echo "Removed unsigned file."; else echo "Failed to remove unsigned file."; fi

if [ "$INSTALLENTRY" == "true" ]; then
	notailslash=$(echo "$EFI_ROOT" | sed 's/\/$//')
	EFI_DISK=$(mount | grep "$notailslash" | cut -f1 -d' ')
	mutilatedpath=$(printf "%s" '\'"$EFI_DIR" "$EFI_NAME" | sed 's/\//\\/g')
	nodev="${EFI_DISK#/dev/}"
	partno="$(cat /sys/class/block/$nodev/partition)"
	echo "Attempting to install new efi file into UEFI boot menu..."
	if (efibootmgr -c -d "$EFI_DISK" -p "$partno" -l "$mutilatedpath" -L "$PRETTY_NAME"); then echo "Added boot entry."; else echo "Error adding boot entry."; fi
fi


